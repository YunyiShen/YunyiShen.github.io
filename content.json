{"meta":{"title":"Yunyi's Website","subtitle":null,"description":null,"author":"Yunyi","url":"http://yunyishen.ml"},"pages":[{"title":"About me","date":"2018-08-01T13:00:14.705Z","updated":"2018-08-01T13:00:14.705Z","comments":true,"path":"about/index.html","permalink":"http://yunyishen.ml/about/index.html","excerpt":"","text":"I am a wildlife ecology student who is trying to make a website. I am from Xi’an, China and completed a bachelor’s degree in Integrated Sciences (a physics-biology interdisciplinary undergraduate program) from Peking University in 2018. Just like my name in Chinese -云逸- which means ‘free as cloud’, I love traveling, especially in the wild. I came to wildlife ecology after a field trip studying white headed langur in Guangxi and after then I worked as a lab member in Qinling Mts and Minshan Mts both for wild panda projects. My research in this period focuses on modelling of species distribution and diversity patterns as well as their explanation, however, I always believe, ecological process can be better understood if one could understand its mechanism at or even below population level. So in UW-Madison, I will try to develop statistical tools for wildlife population estimation, dynamics and conservation genetics under the advisement of Tim Van Deelen, and cooperate with my PKU research mentor, Sheng Li, to answer the questions about wildlife ecology and management both in the US and China. My CV 20180721"},{"title":"Categories","date":"2018-07-26T05:29:53.488Z","updated":"2018-07-26T05:29:53.488Z","comments":true,"path":"categories/index.html","permalink":"http://yunyishen.ml/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-07-26T05:29:53.490Z","updated":"2018-07-26T05:29:53.490Z","comments":true,"path":"tags/index.html","permalink":"http://yunyishen.ml/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"This Week's Finds: Phylogenetic Tree & DFS","slug":"This-Week-s-Finds-Phylogenetic-Tree-DFS","date":"2018-08-20T03:15:48.000Z","updated":"2018-08-20T18:48:06.636Z","comments":true,"path":"2018/08/19/This-Week-s-Finds-Phylogenetic-Tree-DFS/","link":"","permalink":"http://yunyishen.ml/2018/08/19/This-Week-s-Finds-Phylogenetic-Tree-DFS/","excerpt":"","text":"This week’s find is not original finding from my own research project, however, it is derived from part of my pheasant project. Just a small technical problem about how to find ancestor’s every descendants within a phylogenetic tree. First we should talk about phylogenetic tree. A phylogenetic tree or evolutionary tree is a branching diagram or “tree” showing the evolutionary relationships among various biological species or other entities, wiki says. Leaf nodes (nodes without descendants) of a phylogenetic tree typically mean an extant taxon, either species or higher taxon groups, while other nodes mean inferred (through some models) last common ancestor (LCA). For instance, part of my pheasant species: How to obtain a tree like this is an interesting but complicated topic which may cost two or three posts to discuss. This week I am just going to discuss one small topic after one has obtained a phylogenetic tree. How can one answer whether a node A is another node B‘s descendants, for example, whether Lophophorus impejanus is an descendants of “species” 12? Or, how can one find all descendants of 12? The problem is non-trivial, since there are branches. To answer the question, one should have some idea about the general structure of a phylogenetic trees. It contains nodes connected by edges. A set of vertices (nodes) connected by edges, in mathematics, is called a Graph). More specifically, a connected graph without cycle (no time travel for every species!), is called a Tree). When a tree has a natural starting point, or “root”, it can have a canonical direction, either away from the root or towards the root, which makes the tree a directed rooted tree, just like our case of phylogenetic trees in which the natural root can be most ancient ancestor and direction can be same to time. Tree like the one shown above is just a visualization. If you are using MEGA X(Kumar et al. 2018) as I do, you may obtain a csv file showing all linkage of species like this: Every ancestor has only two descendants in the tree and the structure was totally shown in the csv file. In computer science, a kind of data structure contains value and connections to other nodes (can be pointers in some languages like Cpp) will achieve this function. Now the problem changes to, how could one search a directed rooted tree? Ton’s of algorithms are developed to solve this problem. A simple but important one of these is called Depth-first Search or DFS. Just as its name, DFS will explores as far as possible along each branch before backtracking to an un-visited branch. The algorithm has to “remember” every nodes it has already visited. And “backtracking” is realized by either recursive or non-recursive implementation. Recursive version is much easier to code. Complexity of the algorithm is not complex. Time complexity is linear since it will simply traverse the whole tree (or graph), thus takes time O(|V| + |E|), V stands for number of vertices(nodes) while E stands for edges. For the worst case spatial complexity, the algorithm has to remember whether it has already visited for every single vertices, which needs O(|V|) of memory. Pseudo-code of recursive implementation: 1234567891011DFS(v)&#123; visit vertice v visit[v] = T w = first vertice next to v while (w exists)&#123; if (!visit[w])&#123; DFS(w) w = next vertics next to v #backtracking &#125; &#125;&#125; A simple R implementation for phylogenetic trees (no more than 2 descendants) in order to check whether spc.2 is anc.1’s descendant:12345678910111213141516171819202122232425tree &lt;- read.csv('timetreeSpeciestree.csv')comp &lt;&lt;- data.frame(spc=knot,visit=rep(0,length(knot))) # global memory of visitwoff &lt;&lt;- 1 # whether not descendantoffspring &lt;- function(anc.1,spc.2,tree)&#123; woff &lt;&lt;- woff * (anc.1 != spc.2) #check whther is spc.2, example of operation to vertices # if(anc.1 == spc.2)&#123;return(T)&#125; comp$visit[comp$spc==anc.1] &lt;&lt;- 1 # knot already visited if(nchar(anc.1)&gt;=5)&#123; # it is the leaf, stop, no more descendants return() # return(F) &#125; else &#123; # if it is not a leaf, go for its left branch pos &lt;- which(tree[,1]==anc.1) off.1 &lt;- tree[pos,2] if(comp$visit[comp$spc==off.1]!=1)&#123; (offspring(off.1,spc.2,tree))# not visited, go off.1 &lt;- tree[pos,3] # go for another branch if(comp$visit[comp$spc==off.1]!=1)&#123; (offspring(off.1,spc.2,tree)) # not visited go &#125; &#125; &#125;&#125;","categories":[],"tags":[{"name":"This Week's Finds","slug":"This-Week-s-Finds","permalink":"http://yunyishen.ml/tags/This-Week-s-Finds/"}]},{"title":"This Week's Finds: Muntjacs in QJY National Park","slug":"This-Week-s-Finds-Muntjacs-in-QJY-National-Park","date":"2018-08-06T15:18:20.000Z","updated":"2018-08-20T03:30:12.759Z","comments":true,"path":"2018/08/06/This-Week-s-Finds-Muntjacs-in-QJY-National-Park/","link":"","permalink":"http://yunyishen.ml/2018/08/06/This-Week-s-Finds-Muntjacs-in-QJY-National-Park/","excerpt":"","text":"After a long travel from Beijing China to Madison WI, I finally arrived and overcame the jetlag of 13 hours. This week’s find is part of my new project doing for Qianjiangyuan National Park and highly related to my MS project, coexistence of two ungulates in South-East China. I used camera trapping occurrence data and environmental layers with Ecological Niche Model(ENM, actually, MaxEnt), to evaluate whether core region of the National Park could cover the distribution area of its target species, Black Muntjac (Muntiacus crinifrons). Model has good performance according to 5-fold cross validation and ROC-AUC test(0.859, se=0.03). For the primary question, whether it can be well conserved by the legislation about core area of Nation Parks, the short answer according to my result is: yes. 64.4% of the predicted distribution area was in core area while 34.8% of it was in restoration area, means tourism (which is great important for National Parks and stackholders) won’t occur in the distribution area of black muntjac. But what is the most important environmental factors for this prediction? The next table is all the environmental layers I used to predict the distribution:Jackknife test may give us insight about the most important factor(s). Jackknife results showed that, Total Road Density is the most informative single factor, which can get 48.3%(se=1.3%) of the total gain, Forest Origin is the most necessary factor for model performance, without it model gain will reduce to 76.1%(se=0.42%) of the total gain, meanwhile, Forest Origin is also a good single factor, which can get 44.5%(se=1.2%) of the total gain, means forest origin is important for the model in both way. Reaction curve showed black muntjacs avoid high road density and like old growth forest. But the problem is, as we could see, distribution is patchy, and the model was a niche based model, however, in pachy landscape, niche differentiation may be not only way for species to coexist, for example, Leibold et al. 2004‘s 4 paradigms for two species coexist in pachy landscape: (a) patch-dynamics, (b) species-sorting, (c) mass-effects and (d) neutral. In (a) the patch dynamics paradigm is shown with conditions that permit coexistence: a competition-colonization trade-off is illustrated with species A being a superior competitor but species B being a superior colonist; the third patch is vacant and could become occupied by either species. In (b) species are separated into spatial niches and dispersal is not sufficient to alter their distribution. In (c) mass effects cause species to be present in both source and sink habitats; the smaller letters and symbols indicate smaller sized populations. In (d) all species are currently present in all patches; species would gradually be lost from the region and would be replaced by speciation. (Leibold et al. 2004) How to test different hypothesis of coexistence in patchy landscape remains a challenge for my MS’s project.","categories":[],"tags":[{"name":"This Week's Finds","slug":"This-Week-s-Finds","permalink":"http://yunyishen.ml/tags/This-Week-s-Finds/"}]},{"title":"This Week’s Finds: Start and The Website Itself","slug":"Start-of-This-Week-s-Finds","date":"2018-07-29T03:36:49.000Z","updated":"2018-08-16T21:06:15.625Z","comments":true,"path":"2018/07/28/Start-of-This-Week-s-Finds/","link":"","permalink":"http://yunyishen.ml/2018/07/28/Start-of-This-Week-s-Finds/","excerpt":"","text":"John Baez, a mathematical physicist form UCR, writes down approximately every week what he found (from papers, books, researches, etc.) in that week since 1993. The posts could be found here. The name (as well as the content) of this column, changed from This Week’s Finds in Mathematical Physics to This Week’s Finds in 2010. I love this idea and will try hard to follow him though I do not think I could really do every week. The First This Week’s Finds is about this blog itself. It is based on Github Pages and Hexo. The Domain yunyishen.ml is ‘bought’ from dot.tk with $0 price. Github Pages is a special Github repository which is the host of the website for you and your project. It is easy to start by creating a new repository named username.github.io. I also tried to fork other’s Github Pages repository and rename it, which works well. Also by adding a file called CNAME containing your own domain name to the master brunch of this repository, and setting your domain’s DNS to Github, your Github Pages could be visit through your own domain name. The next step, generally speaking, is to put appropriate stuff into the new repository. I believe not all ecology guys know PHP, at least I do not know, thus we need tools to help us generate htmls. Hexo offers an easy way. It uses Markdown language(Wikipedia) to convert plain text (like txt) to html files. I have to say it is also hard but at least much easier than PHP. Users of Hexo also open sourced thousands of themes for others to use (e.g. my page is using icarus) so you do not need to code the structure of you website, insteat, the only thing needed is to edit _config.yml files. Posting is also easy, what you need to do consist of 3 steps, creating new post, editing, and push files into your repository. The first and last step can be done with two one-line command in Git bash. The only thing complex is to write. Though actually there are a lot of tricks in using Markdown and Github I do not know, I am still happy that I made myself a website last week.","categories":[],"tags":[{"name":"This Week's Finds","slug":"This-Week-s-Finds","permalink":"http://yunyishen.ml/tags/This-Week-s-Finds/"}]},{"title":"A Small Step","slug":"A-Small-Step","date":"2018-07-27T01:21:42.000Z","updated":"2018-07-26T12:23:15.618Z","comments":true,"path":"2018/07/26/A-Small-Step/","link":"","permalink":"http://yunyishen.ml/2018/07/26/A-Small-Step/","excerpt":"","text":"That’s one small step for (a) website, one giant leap for Yunyi.","categories":[],"tags":[{"name":"Web tech","slug":"Web-tech","permalink":"http://yunyishen.ml/tags/Web-tech/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-07-26T05:48:16.270Z","updated":"2018-07-26T04:38:51.145Z","comments":true,"path":"2018/07/26/hello-world/","link":"","permalink":"http://yunyishen.ml/2018/07/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}